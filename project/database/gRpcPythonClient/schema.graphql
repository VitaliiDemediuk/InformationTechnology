schema {
    query: Query
    mutation: Mutation
}

type TableListItem {
    id: ID!
    name: String!
}

type GetTableListResult {
    success: Boolean!
    errors: [String!]
    tables_list: [TableListItem!]
}

type ColumnInfo {
    name: String!
    type: String!
    lower_limit: Int
    upper_limit: Int
}

type TableInfo {
    table_name: String!
    columns: [ColumnInfo!]
}

type GetTableInfoResult {
    success: Boolean!
    errors: [String!]
    table_info: TableInfo
}

type IntegerWrapper {
    int_value: Int!
}

type RealWrapper {
    real_value: Float!
}

type CharWrapper {
    char_value: String!
}

type StringWrapper {
    str_value: String
}

type File {
    filename: String!
}

type IntervalInteger {
    int_value: Int!
}

union Cell = IntegerWrapper | RealWrapper | CharWrapper | StringWrapper | File | IntervalInteger

type Row {
    row_id: Int
    cells: [Cell]
}

type Table {
    rows: [Row!]
}

type GetTableResult {
    success: Boolean!
    errors: [String!]
    table: Table
}

type Query {
    getTableList: GetTableListResult!
    getTableInfo(table_id: ID): GetTableInfoResult
    getTable(table_id: ID): GetTableResult
}

type MutationResult {
    success: Boolean!
    errors: [String!]
}

type Mutation {
    createNewTable(name: String!): MutationResult
    renameTable(table_id: Int!, new_name: String!): MutationResult!
    deleteTable(table_id: Int!): MutationResult!

    createDefaultColumn(table_id: Int!, name: String!, column_type: String!): MutationResult!
    createIntIntervalColumn(table_id: Int!, name: String!, lower_limit: Int!, upper_limit: Int!): MutationResult!
    renameColumn(table_id: Int!, column_idx: Int!, new_name: String!): MutationResult!
    deleteColumn(table_id: Int!, column_idx: Int!): MutationResult!

    createNewRow(table_id: Int!): MutationResult!
    deleteRow(table_id: Int!, row_id: Int!): MutationResult!
    editIntCell(table_id: Int!, column_idx: Int!, row_id: Int!, data: Int!): MutationResult!
    editRealCell(table_id: Int!, column_idx: Int!, row_id: Int!, data: Float!): MutationResult!
    editCharCell(table_id: Int!, column_idx: Int!, row_id: Int!, data: String!): MutationResult!
    editStringCell(table_id: Int!, column_idx: Int!, row_id: Int!, data: String!): MutationResult!
    editIntervalIntCell(table_id: Int!, column_idx: Int!, row_id: Int!, data: Int!): MutationResult!
    clearCell(table_id: Int!, column_idx: Int!, row_id: Int!): MutationResult!

    createCartesianProduct(first_table_id: Int! second_table_id: Int!): MutationResult!
}